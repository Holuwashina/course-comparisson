// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id       String   @id @unique @default(uuid()) @map("id")
  name     String   @map("name") @db.VarChar(255)
  location String   @map("location") @db.VarChar(255)
  courses  Course[]
}

model Course {
  id              String            @id @unique @default(uuid())
  institutionId   String            @map("institution_id") @db.VarChar(255)
  name            String            @map("name") @db.VarChar(255)
  description     String?           @map("description") @db.Text
  imageUrl        String            @map("image_url") @db.VarChar(255)
  code            String            @unique @map("code") @db.VarChar(20)
  type            String            @map("type") @db.VarChar(20)
  duration        String            @map("duration") @db.VarChar(255)
  CourseDetail    CourseDetail[]
  CoreSubject     CoreSubject[]
  MajorCourse     MajorCourse[]
  CapstoneSubject CapstoneSubject[]
  institution     Institution       @relation(fields: [institutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Ranking         Ranking[]
}

model CourseDetail {
  id       String  @id @unique @default(uuid())
  index    Int     @default(autoincrement()) @map("index")
  courseId String  @map("course_id") @db.VarChar(255)
  label    String? @map("label") @db.VarChar(255)
  value    String? @map("value") @db.VarChar(255)
  content  String  @map("content") @db.Text
  more     String? @map("more") @db.Text
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CoreSubject {
  id       String   @id @unique @default(uuid())
  courseId String?  @map("course_id") @db.VarChar(255)
  name     String   @map("name") @db.VarChar(255)
  code     String   @unique @map("code") @db.VarChar(20)
  link     String?  @map("link") @db.VarChar(255)
  year     Int?     @map("year") @db.Integer
  credit   Int?     @map("credit") @db.Integer
  content  String   @map("content") @db.Text
  course   Course[]
}

model MajorCourse {
  id       String  @id @unique @default(uuid())
  courseId String? @map("course_id") @db.VarChar(255)
  name     String  @map("name") @db.VarChar(255)
  code     String  @unique @map("code") @db.VarChar(20)
  link     String? @map("link") @db.VarChar(255)
  content  String  @map("content") @db.Text
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CapstoneSubject {
  id       String  @id @unique @default(uuid())
  courseId String? @map("course_id") @db.VarChar(255)
  name     String  @map("name") @db.VarChar(255)
  code     String  @unique @map("code") @db.VarChar(20)
  link     String? @map("link") @db.VarChar(255)
  year     Int?    @map("year") @db.Integer
  credit   Int?    @map("credit") @db.Integer
  content  String  @map("content") @db.Text
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Ranking {
  id                 String @id @unique @default(uuid())
  courseId           String @map("course_id") @db.VarChar(36)
  cost               Int    @map("cost")
  studentReviews     Float  @map("student_reviews")
  employmentOutcomes Int    @map("employment_outcomes")
  courseDuration     Int    @map("course_duration")
  salaryRange        Int    @map("salary_range")

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
